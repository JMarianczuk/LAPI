using System.Collections.Immutable;
using System.Linq;
using System.Security.Cryptography;
using LAPI.Model;
using LAPI.Model.Cryptography;

namespace LAPI.Test.Model.Cryptography
{
    public static class TestData
    {
        private static readonly byte[] TestSymmetricKeySource = new byte[]
        {
            198, 25, 200, 166, 108, 139, 182, 103,
            55, 220, 61, 190, 228, 152, 251, 111,
            195, 59, 184, 185, 184, 119, 111, 72,
            48, 124, 141, 102, 106, 149, 206, 58
        };
        public static SymmetricKey TestSymmetricKey  { get; } = SymmetricKey.FromBuffer(TestSymmetricKeySource);

        #region RsaByteArrayData
        private static readonly byte[] TestModulus = new byte[]
        {
            231, 19, 162, 93, 59, 9, 5, 209, 42, 54, 222, 216, 33, 163, 124, 116, 147, 210, 104, 164, 24, 240, 72, 32, 
            90, 71, 246, 55, 123, 141, 115, 38, 240, 95, 197, 253, 190, 243, 181, 1, 146, 253, 237, 183, 97, 186, 235, 
            179, 213, 11, 197, 17, 243, 196, 210, 186, 110, 74, 52, 184, 201, 217, 207, 173, 198, 14, 108, 36, 33, 71, 
            66, 100, 104, 207, 254, 195, 9, 136, 23, 77, 182, 222, 205, 27, 46, 166, 242, 184, 39, 177, 114, 30, 57, 
            106, 167, 122, 102, 27, 152, 188, 184, 112, 39, 66, 133, 228, 114, 112, 1, 230, 94, 39, 141, 178, 154, 119, 
            154, 6, 197, 163, 195, 13, 108, 53, 50, 154, 235, 168, 64, 225, 183, 0, 122, 217, 202, 92, 138, 23, 163, 
            233, 190, 53, 245, 243, 220, 230, 23, 135, 6, 40, 190, 123, 201, 180, 242, 158, 153, 113, 93, 92, 154, 10, 
            152, 127, 30, 199, 154, 229, 93, 246, 212, 118, 219, 94, 65, 16, 126, 33, 136, 19, 222, 217, 2, 223, 215, 
            119, 31, 120, 223, 202, 162, 231, 63, 195, 70, 120, 92, 75, 118, 234, 166, 121, 21, 94, 199, 90, 249, 16, 
            238, 159, 204, 227, 35, 157, 93, 171, 89, 141, 249, 231, 96, 33, 32, 246, 238, 58, 206, 142, 210, 160, 15, 
            65, 241, 5, 209, 221, 116, 175, 213, 163, 155, 26, 211, 238, 181, 234, 120, 26, 95, 125, 119, 8, 136, 79, 
            174, 115, 232, 41, 9, 136, 75, 18, 19, 236, 242, 11, 255, 82, 137, 104, 175, 241, 51, 104, 73, 181, 200, 
            232, 31, 35, 78, 208, 9, 6, 205, 24, 69, 5, 202, 89, 166, 88, 131, 3, 252, 142, 132, 9, 168, 139, 14, 74, 
            66, 180, 253, 131, 118, 92, 199, 180, 168, 198, 121, 215, 132, 117, 132, 77, 55, 215, 210, 230, 242, 45, 
            118, 171, 30, 222, 91, 212, 149, 146, 79, 242, 95, 12, 137, 191, 192, 91, 103, 227, 56, 44, 96, 59, 245, 
            226, 62, 141, 194, 196, 66, 88, 218, 150, 79, 187, 126, 11, 165, 202, 78, 114, 20, 83, 199, 152, 7, 21, 61,
            127, 12, 67, 113, 71, 59, 140, 246, 222, 45, 149, 57, 58, 224, 200, 0, 25, 151, 7, 59, 175, 237, 210, 41, 
            62, 41, 164, 96, 226, 19, 6, 251, 49, 234, 35, 243, 130, 64, 63, 191, 202, 196, 211, 108, 128, 247, 26, 
            171, 197, 208, 44, 65, 190, 80, 158, 149, 132, 233, 180, 99, 246, 60, 45, 219, 22, 147, 132, 84, 88, 172, 
            189, 222, 26, 161, 148, 110, 93, 18, 140, 139, 144, 185, 36, 55, 168, 121, 187, 148, 155, 211, 75, 170, 
            171, 154, 62, 165, 15, 231, 52, 227, 20, 149, 157, 100, 159, 238, 104, 174, 149, 247, 237, 229, 253, 110, 
            206, 252, 3, 39, 50, 78, 168, 225, 169, 153, 186, 241, 156, 120, 58, 206, 126, 247, 138, 169, 177, 120, 
            247, 181, 248, 92, 157
        };

        private static readonly byte[] TestPrivateExponent = new byte[]
        {
            129, 230, 173, 189, 207, 116, 49, 10, 246, 186, 69, 232, 38, 112, 235, 131, 245, 157, 177, 41, 158, 195, 
            101, 40, 154, 216, 29, 119, 239, 67, 3, 90, 254, 130, 56, 161, 126, 249, 45, 230, 38, 166, 13, 62, 171, 
            248, 18, 140, 211, 213, 124, 1, 173, 146, 22, 12, 171, 247, 151, 79, 210, 89, 89, 192, 140, 184, 138, 222, 
            124, 190, 188, 122, 9, 217, 243, 147, 221, 5, 222, 99, 215, 203, 196, 109, 229, 122, 0, 180, 185, 203, 173,
            37, 132, 141, 138, 124, 234, 109, 213, 29, 50, 106, 10, 8, 1, 144, 253, 44, 46, 69, 60, 228, 235, 105, 94,
            32, 162, 59, 240, 91, 49, 73, 152, 109, 7, 119, 195, 198, 160, 66, 195, 71, 199, 200, 43, 84, 126, 100,
            239, 198, 117, 33, 140, 148, 124, 183, 244, 189, 249, 30, 106, 134, 216, 75, 154, 160, 194, 13, 210, 184,
            61, 248, 122, 229, 235, 125, 182, 123, 254, 168, 197, 163, 211, 138, 86, 245, 88, 146, 173, 22, 206, 142,
            28, 105, 141, 140, 239, 234, 89, 148, 102, 163, 173, 90, 175, 128, 246, 17, 142, 86, 55, 35, 150, 121, 227,
            132, 38, 195, 248, 1, 105, 130, 191, 0, 182, 41, 159, 124, 138, 226, 33, 78, 62, 99, 210, 100, 200, 189,
            205, 118, 33, 93, 166, 138, 233, 1, 159, 153, 65, 118, 105, 185, 89, 46, 182, 161, 138, 198, 248, 171, 101,
            129, 44, 111, 238, 215, 52, 84, 111, 213, 27, 101, 72, 99, 144, 232, 242, 104, 120, 49, 74, 231, 142, 123,
            188, 54, 203, 109, 193, 53, 117, 141, 226, 151, 144, 100, 49, 161, 128, 248, 188, 111, 63, 36, 239, 192,
            247, 116, 170, 156, 181, 246, 31, 38, 207, 14, 219, 41, 147, 63, 220, 84, 190, 246, 170, 26, 56, 66, 75,
            114, 136, 243, 114, 238, 214, 119, 42, 59, 252, 140, 176, 117, 182, 29, 178, 118, 243, 60, 149, 35, 172,
            214, 23, 228, 106, 88, 50, 187, 231, 4, 101, 194, 243, 150, 222, 0, 73, 3, 86, 213, 162, 181, 68, 221, 127,
            246, 247, 206, 6, 35, 56, 64, 204, 201, 146, 165, 193, 149, 219, 2, 48, 194, 229, 49, 89, 158, 175, 180,
            208, 137, 58, 26, 222, 24, 251, 148, 108, 254, 230, 71, 203, 250, 178, 110, 157, 198, 236, 104, 252, 164,
            122, 233, 205, 195, 220, 177, 91, 179, 150, 107, 61, 96, 5, 49, 170, 110, 166, 107, 154, 88, 25, 68, 63,
            71, 175, 151, 56, 215, 109, 126, 50, 243, 8, 162, 164, 61, 79, 232, 62, 191, 199, 99, 120, 103, 146, 182,
            234, 234, 24, 131, 165, 33, 170, 108, 239, 133, 249, 14, 115, 116, 162, 122, 238, 179, 155, 214, 165, 76,
            34, 173, 119, 125, 245, 112, 218, 228, 195, 225, 229, 222, 108, 193, 110, 208, 43, 37, 56, 219, 58, 56,
            104, 189, 172, 18, 91, 74, 222, 223, 126, 218, 209, 217
        };

        private static readonly byte[] TestPublicExponent = new byte[] { 1, 0, 1 };
        #endregion

        public static RsaPrivateKey TestAsymmetricPrivateKey { get; } = new RsaPrivateKey(TestModulus, TestPrivateExponent);
        public static RsaPublicKey TestAsymmetricPublicKey { get; } = new RsaPublicKey(TestModulus, TestPublicExponent);
        public static RsaKeyPair TestAsymmetricKeyPair { get; } = new RsaKeyPair(TestAsymmetricPrivateKey, TestAsymmetricPublicKey);
    }
}